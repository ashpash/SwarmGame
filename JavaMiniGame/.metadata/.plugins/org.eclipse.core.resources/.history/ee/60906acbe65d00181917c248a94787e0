package com.miniGame;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.util.Random;

public class Game extends Canvas implements Runnable{
	
	
	private static final long serialVersionUID = 6403554345718387066L;

	public static final int WIDTH = 640;
	public static final int HEIGHT = (WIDTH/12 * 9);
	
	private Thread thread; // making game single threaded 
	private boolean running = false; 
	
	private Handler handler; 

	public Game () { 
		
		handler = new Handler(); 
		this.addKeyListener(new KeyInput(handler));
		
		new Window(WIDTH, HEIGHT, "ASHLEY'S MINI GAME", this);	
		
		handler.addObject(new Player(WIDTH/2 + WIDTH/10,HEIGHT/2,ID.Player));
		handler.addObject(new Player(WIDTH/2 - WIDTH/10,HEIGHT/2,ID.Player2));
		
		//populate Gremlins 
		
		for (int x =0; x<22; x++) { 
			
			handler.addObject(new Gremlin(32,32,ID.Gremlin));
		}
	}
	
	public synchronized void start() { 
		thread = new Thread(this);
		thread.start();
		running = true; 
	}
	
	public synchronized void stop() { 
		try{ 
			thread.join(); 
			running = false; 			
		}catch(Exception e) { 
			e.printStackTrace(); 
		}
	}
	
	public void run() {   /// popular game loop 
		long lastTime = System.nanoTime(); 
		double amountOfTicks = 60.0; 
		double ns = 1000000000/ amountOfTicks; 
		double delta = 0; 
		long timer = System.currentTimeMillis(); 
		int frames = 0; 
		while(running) {
			long now = System.nanoTime(); 
			delta += (now - lastTime)/ns; 
			lastTime = now; 
			while(delta >= 1) {
				tick(); 
				delta --; 
			}
			if(running)
				render(); 
			frames++; 
			
			if(System.currentTimeMillis() - timer>1000){
				timer += 1000; 
				System.out.println("FPS: "+ frames);
				frames = 0; 
			}
		}
		stop(); 
	}
			
	private void tick () {
		handler.tick();
	}
	
	private void render() {
		
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) { 
			this.createBufferStrategy(3); // creates 3 buffers within game 
			return; 
		}
		
				
		Graphics g = bs.getDrawGraphics(); 
		
		g.setColor(Color.PINK);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		handler.render(g);
		g.dispose();
		bs.show();
		
	}
	
	
	public static void main(String args []) {
		new Game(); 
	}

}
